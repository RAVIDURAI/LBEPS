Write a program to accept the customer details like :-
1.  CustomerId        -- String -- 
2.  CustomerName      -- String -- 
3.  CustomerGender    -- String -- 
4.  CustomerAge       -- int -- 
5.  CustomerAddress   -- String -- 
6.  CustomerCity      -- String -- 
7.  CustomerCountry   -- String -- 
8.  CustomerPin       -- String -- 
9.  CustomerPhone     -- String -- 
10. CustomerAreaOfInterest --String--
11. CustomerDOB       -- String -- 

Validate the data:-
1.  CustomerId-must not be more than 4 character and must start with 'C'
2.  CustomerName -- data must not be blank or null
3.  CustomerGender -- Should allow only Male and Female    
4.  CustomerPhone     should allow null value if user is not entring any data
5. CustomerAreaOfInterest -- user must enter 2 value
6. CustomerDOB     --should not be more than 8 characters

Analysis
1. Add at least 10 records and store the data in file seperated by delimeter like comma and space
2. After storing the data kindly read the data from file and do below analysis
	1. Display total male and female customers
	2. Display the total customer country wise
	3. Display the total customer who like Traveling
	4. Display total customer who like reading
	5. Display total customer who is above 18 years of age
	6. Display total customer who do not have phone number.
package timepass02;

public class Customer {

	public final String id;
	public final String name;
	public final String gender;
	public final int age;
	public final String address;
	public final String city;
	public final String country;
	public final String pin;
	public final String phone;
	public final String areaofinterest;
	public final String dob;

	private Customer(String id, String name, String gender, int age, String address, String city, String country,
			String pin, String phone, String areaofinterest, String dob) {
		this.id = id;
		this.name = name;
		this.gender = gender;
		this.age = age;
		this.address = address;
		this.city = city;
		this.country = country;
		this.pin = pin;
		this.phone = phone;
		this.areaofinterest = areaofinterest;
		this.dob = dob;

	}

	public String getId() {
		return id;
	}

	public String getName() {
		return name;
	}

	public String getGender() {
		return gender;
	}

	public int getAge() {
		return age;
	}

	public String getAddress() {
		return address;
	}

	public String getCity() {
		return city;
	}

	public String getCountry() {
		return country;
	}

	public String getPin() {
		return pin;
	}

	public String getPhone() {
		return phone;
	}

	public String getAreaofinterest() {
		return areaofinterest;
	}

	public String getDob() {
		return dob;
	}

	static class CustomerBuilder {
		private String id;
		private String name;
		private String gender;
		private int age;
		private String address;
		private String city;
		private String country;
		private String pin;
		private String phone;
		private String areaofinterest;
		private String dob;

		public CustomerBuilder addId(String id) {
			if (id.startsWith("C") && id.length() > 4) {
				this.id = id;
				return this;
			}
			throw new IllegalArgumentException(
					"Customer Id must start with C and must not be greater than 4 characters");
		}

		public CustomerBuilder addName(String name) {
			if (name.length() >= 1) {
				this.name = name;
				return this;
			}
			throw new IllegalArgumentException("name is not a null");
		}

		public CustomerBuilder addGender(String gender) {
			int count=0;
			if (gender.equals("male")) {
				this.gender = gender;
				return this;
				
				
			} else if (gender.equals("female")) {
				this.gender = gender;
				return this;
			}
			throw new IllegalArgumentException("only enter  female &male");
		}

		public CustomerBuilder addAge(int age) {
			this.age = age;
			return this;
		}

		public CustomerBuilder addAddress(String address) {
			this.address = address;
			return this;
		}

		public CustomerBuilder addCity(String city) {

			this.city = city;
			return this;
		}

		public CustomerBuilder addCountry(String country) {

			this.country = country;
			return this;
		}

		public CustomerBuilder addPin(String pin) {

			this.pin = pin;
			return this;
		}

		public CustomerBuilder addPhone(String phone) {
			if (phone.length() >= 1) {
				this.phone = phone;
				return this;
			}
			throw new IllegalArgumentException("phon no not null");
		}

		public CustomerBuilder addAreaofinterest(String areaofinterest) {

			this.areaofinterest = areaofinterest;
			return this;
		}

		public CustomerBuilder addDob(String dob) {
			if (dob.length() >= 8) {
				this.dob = dob;
				return this;
			}
			throw new IllegalArgumentException("dob must 8 charactor");
		}
	
	         

		public Customer build() {
			return new Customer(id, name, gender, age, address, city, country, pin, phone, areaofinterest, dob);
		}
	}

}
			
package timepass02;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.stream.Collectors;

import timepass02.Customer.CustomerBuilder;

public class Customerde {

	public static void main(String[] args) {
		try (Scanner s = new Scanner(System.in)) {
			System.out.println("Enter number of records:");
			List<Customer> customers = new ArrayList<>();
			int count = s.nextInt();
			
			for (int i = 0; i < count; i++) {
				customers.add(getCustomerDetails(s));
			}
			int j=0;int k=0;int l=0;int m=0;int o=0;

			for(Customer cust : customers){
				if(cust.getGender().equals("male")){
					l++;
					System.out.println("total male customer:        "+l);
				}
				else if(cust.getGender().equals("female"))
				{
					m++;
					System.out.println("total no of female;      "+m);
				}
			}
				for(Customer cust : customers){

				
			if(cust.getCountry().equals("tn")){
					j++;
					System.out.println("total no of same country in tn:       "+j);
				
			}
				else if (cust.getCountry().equals("up")){
					k++;
					System.out.println("total no of same country in up:      "+k);
				}
			}
				for(Customer cust : customers){

				if(cust.getAge()>=18)	{
					
					System.out.println("above 18:         "+o);
				o++;
				}
				}int co=0;
				for(Customer cust : customers){
					if(cust.getAreaofinterest().equals("london")){
						co++;
						System.out.println("interest in london"+co);
					}
				}		
			
	       // long maleCustomers = customers.stream().filter(customer -> customer.gender.equalsIgnoreCase("Male")).count();
			//long femaleCustomers = customers.stream().filter(customer -> customer.gender.equalsIgnoreCase("Female")).count();
			//long customersLikeTravelling = customers.stream().filter(customer -> customer.areaofinterest.contains("travelling")).count();
			//long customersLikeReading = customers.stream().filter(customer -> customer.getAreaofinterest().contains("reading")).count();
			//Map<String, Long> countryGroup = customers.stream().collect(Collectors.groupingBy(Customer::getCity, Collectors.counting()));
			//long above18Years = customers.stream().filter(customer -> customer.age > 18).count();
			//long noPhone = customers.stream().filter(customer -> customer.phone == null || customer.phone.trim().equals("")).count();
			
			
			
			
		

	}
		}

	private static Customer getCustomerDetails(Scanner scanner) {
		Customer.CustomerBuilder builder = new CustomerBuilder();
		System.out.println("enter the id");
		builder.addId(scanner.next());
		System.out.println("enter the name");
		builder.addName(scanner.next());
		System.out.println("enter the gender");
		builder.addGender(scanner.next());
		System.out.println("enter the age");
		builder.addAge(scanner.nextInt());
		System.out.println("enter the address");
		builder.addAddress(scanner.next());
		System.out.println("enter the city");
		builder.addCity(scanner.next());
		System.out.println("enter the country");
		builder.addCountry(scanner.next());
		System.out.println("enter the pin");
		builder.addPin(scanner.next());
		System.out.println("enter the phone");
		builder.addPhone(scanner.next());
		System.out.println("enter the area of interest");
		builder.addAreaofinterest(scanner.next());
		System.out.println("enter the dob");
		builder.addDob(scanner.next());
		
   
		return builder.build();

	}

}

